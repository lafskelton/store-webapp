{"ast":null,"code":"// ################ ITEMS\n//\n//Defines an item\n//Defines a row\nexport var RowType;(function(RowType){RowType[RowType[\"sectionTitle\"]=0]=\"sectionTitle\";RowType[RowType[\"full\"]=1]=\"full\";RowType[RowType[\"double\"]=2]=\"double\";RowType[RowType[\"single\"]=3]=\"single\";})(RowType||(RowType={}));// ################ ITEMS\n//","map":{"version":3,"sources":["/home/limlam/hyperbola.store/webapp/src/app/myTypes.tsx"],"names":["RowType"],"mappings":"AAAA;AACA;AACA;AAmBA;AASA,UAAYA,CAAAA,OAAZ,C,UAAYA,O,EAAAA,O,CAAAA,O,mCAAAA,O,CAAAA,O,mBAAAA,O,CAAAA,O,uBAAAA,O,CAAAA,O,0BAAAA,O,GAAAA,O,MAcZ;AACA","sourcesContent":["// ################ ITEMS\n//\n//Defines an item\nexport interface ItemData {\n  sectionId: number;\n  rowId: number;\n  rowType: RowType;\n  id: string;\n  title: string;\n  price: number;\n  variantColors: string[];\n  tileImg: string;\n  // galleryImgList: string[];\n  galleryImgList: GalleryImageElement[];\n}\n\nexport interface GalleryImageElement {\n  imgSrc: string;\n  imgDesc: string;\n}\n\n//Defines a row\nexport interface RowData {\n  sectionId: number;\n  rowId: number;\n  rowType: RowType;\n  numItems: number;\n  items: ItemData[];\n}\n\nexport enum RowType {\n  sectionTitle,\n  full, // Full width tile\n  double, //Two tiles side by side\n  single, //single right aligned tile\n}\nexport interface BrowseManifest {\n  rows: RowData[];\n}\n\nexport interface SideDrawerState {\n  itemData: ItemData;\n}\n\n// ################ ITEMS\n//\n"]},"metadata":{},"sourceType":"module"}