[{"/home/master/nvme/limlam/store-webapp/webapp/src/index.tsx":"1","/home/master/nvme/limlam/store-webapp/webapp/src/app/app.tsx":"2","/home/master/nvme/limlam/store-webapp/webapp/src/app/bottomMenuBar/bottomMenuBar.tsx":"3","/home/master/nvme/limlam/store-webapp/webapp/src/app/views/home/home.tsx":"4","/home/master/nvme/limlam/store-webapp/webapp/src/app/views/browse_v3/browse.tsx":"5","/home/master/nvme/limlam/store-webapp/webapp/src/app/views/cart/cart.tsx":"6","/home/master/nvme/limlam/store-webapp/webapp/src/app/views/drawer_v2/drawer.tsx":"7","/home/master/nvme/limlam/store-webapp/webapp/src/app/views/home/logo.tsx":"8","/home/master/nvme/limlam/store-webapp/webapp/src/app/views/home/aboutus.tsx":"9","/home/master/nvme/limlam/store-webapp/webapp/src/app/myTypes.tsx":"10","/home/master/nvme/limlam/store-webapp/webapp/src/app/views/browse_v3/itemSection.tsx":"11","/home/master/nvme/limlam/store-webapp/webapp/src/app/views/cart/checkout.tsx":"12","/home/master/nvme/limlam/store-webapp/webapp/src/app/views/cart/mycart.tsx":"13","/home/master/nvme/limlam/store-webapp/webapp/src/app/views/drawer_v2/desktopContent.tsx":"14","/home/master/nvme/limlam/store-webapp/webapp/src/app/views/drawer_v2/mobileContent.tsx":"15","/home/master/nvme/limlam/store-webapp/webapp/src/app/views/browse_v3/lib/ripple.ts":"16","/home/master/nvme/limlam/store-webapp/webapp/src/app/views/browse_v3/api/getManifest.ts":"17","/home/master/nvme/limlam/store-webapp/webapp/src/proto/storeapi_pb_service.js":"18","/home/master/nvme/limlam/store-webapp/webapp/src/proto/storeapi_pb.js":"19"},{"size":1406,"mtime":1628390826504,"results":"20","hashOfConfig":"21"},{"size":7293,"mtime":1628391427167,"results":"22","hashOfConfig":"21"},{"size":2133,"mtime":1628390826504,"results":"23","hashOfConfig":"21"},{"size":1465,"mtime":1628390826504,"results":"24","hashOfConfig":"21"},{"size":21246,"mtime":1628399826354,"results":"25","hashOfConfig":"21"},{"size":1661,"mtime":1628390826504,"results":"26","hashOfConfig":"21"},{"size":2770,"mtime":1628390826504,"results":"27","hashOfConfig":"21"},{"size":6129,"mtime":1628390826504,"results":"28","hashOfConfig":"21"},{"size":4268,"mtime":1628390826504,"results":"29","hashOfConfig":"21"},{"size":1130,"mtime":1628390826504,"results":"30","hashOfConfig":"21"},{"size":9765,"mtime":1628390826504,"results":"31","hashOfConfig":"21"},{"size":1096,"mtime":1628390826504,"results":"32","hashOfConfig":"21"},{"size":6305,"mtime":1628390826504,"results":"33","hashOfConfig":"21"},{"size":12000,"mtime":1628390826504,"results":"34","hashOfConfig":"21"},{"size":13381,"mtime":1628390826504,"results":"35","hashOfConfig":"21"},{"size":947,"mtime":1628390826504,"results":"36","hashOfConfig":"21"},{"size":1659,"mtime":1628402907976,"results":"37","hashOfConfig":"21"},{"size":1540,"mtime":1628402849523,"results":"38","hashOfConfig":"21"},{"size":11455,"mtime":1628400483686,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},"183xdqr",{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"43"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"43"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"43"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"43"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"43"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"43"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"43"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"43"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"43"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"90"},"/home/master/nvme/limlam/store-webapp/webapp/src/index.tsx",["91"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app/app\";\nimport { createTheme, responsiveFontSizes } from \"@material-ui/core/styles\";\n\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport { grey } from \"@material-ui/core/colors\";\nimport { colors } from \"@material-ui/core\";\n\nconst theme = createTheme({\n  typography: {\n    h1: {\n      fontFamily: \"'Gurajada', serif\",\n      // fontSize:\n    },\n    h2: {\n      fontFamily: \"'Montserrat', sans-serif\",\n    },\n    h3: {\n      fontFamily: \"'Montserrat', sans-serif\",\n    },\n    h4: {\n      fontFamily: \"'Montserrat', sans-serif\",\n    },\n    h5: {\n      fontFamily: \"'Montserrat', sans-serif\",\n    },\n    subtitle1: {\n      fontFamily: \"'Montserrat', sans-serif\",\n      color: \"#ffffff\",\n    },\n    subtitle2: {\n      fontFamily: \"'Gurajada', serif\",\n      color: \"#ffffff\",\n    },\n  },\n  palette: {\n    type: \"dark\",\n\n    primary: {\n      main: \"#501515\",\n      dark: \"#501515\",\n    },\n    secondary: {\n      main: \"#501515\",\n      dark: \"#501515\",\n    },\n    action: {},\n    background: {\n      paper: \"rgba(0,0,0,0.4)\",\n    },\n    text: {\n      primary: grey[400],\n      secondary: grey[400],\n    },\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={responsiveFontSizes(theme)}>\n      <App key=\"app-root\" />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n",["92","93"],"/home/master/nvme/limlam/store-webapp/webapp/src/app/app.tsx",["94"],"import { useState, useEffect } from \"react\";\nimport ButtomMenuBar from \"./bottomMenuBar/bottomMenuBar\";\nimport Home from \"./views/home/home\";\nimport Browse, { loadBrowseManifest } from \"./views/browse_v3/browse\";\nimport Cart from \"./views/cart/cart\";\nimport { Slide, Box } from \"@material-ui/core\";\nimport {\n  BrowseManifest,\n  ItemData,\n  ShoppingCartItem,\n  SideDrawerState,\n} from \"./myTypes\";\nimport { SideDrawer } from \"./views/drawer_v2/drawer\";\nimport { useMediaQuery } from \"@material-ui/core\";\n\nfunction App() {\n  const [menuSelectState, setMenuSelectState] = useState(\"Home\");\n  const [shoppingCart, setShoppingCart] = useState<ShoppingCartItem[]>([]);\n  const [sideDrawer, setSideDrawer] = useState<SideDrawerState | undefined>(\n    undefined\n  );\n  const [exitTimer, setExitTimer] = useState<boolean>(false);\n  const [showSideDrawer, setShowSideDrawer] = useState<boolean>(false);\n  const [manifest, setManifest] = useState<BrowseManifest | undefined>();\n\n  const isDesktop = useMediaQuery(\"(min-aspect-ratio: 6/5)\");\n\n  // Shopping cart func\n  const addItemToCart = (\n    item: ItemData,\n    variant: number,\n    size: \"xsm\" | \"sm\" | \"md\" | \"lg\" | \"xlg\",\n    qty: number\n  ) => {\n    let cartItem: ShoppingCartItem = {\n      item: item,\n      variant: variant,\n      size: size,\n      qty: qty,\n    };\n    let newCart = shoppingCart.concat([cartItem]);\n    window.sessionStorage.setItem(\"shoppingCart\", JSON.stringify(newCart));\n    console.log(newCart);\n\n    setShoppingCart(newCart);\n  };\n\n  const removeItemFromCart = (item: ItemData) => {\n    let newCart = shoppingCart.filter((elem) => elem.item.id !== item.id);\n    window.sessionStorage.setItem(\"shoppingCart\", JSON.stringify(newCart));\n    console.log(newCart);\n    setShoppingCart(newCart);\n  };\n  // MAIN PAGE VIEW CONTROLLER\n  //Controls visible page & animated page transitions\n  const handleViewChange = (event: React.ChangeEvent<{}>, newValue: string) => {\n    if (newValue === menuSelectState) {\n      if (showSideDrawer) {\n        setShowSideDrawer(false);\n        setTimeout(() => {\n          //Slide back in after 666 ms\n          setSideDrawer(undefined);\n        }, 500);\n      }\n      return;\n    }\n    //Slide out the view\n    setExitTimer(true);\n    setShowSideDrawer(false);\n\n    //These timeouts ensure a smooth transitions between pages\n\n    //After 250 ms, change page state\n    setTimeout(() => {\n      //Set menu state\n      setMenuSelectState(newValue);\n      setTimeout(() => {\n        //Slide back in after 666 ms\n        setSideDrawer(undefined);\n        setExitTimer(false);\n      }, 500);\n    }, 555);\n  };\n\n  //runs when the selected view changes\n  //Ensure the manifest is loaded or loading on page change\n  useEffect(() => {}, [menuSelectState]);\n\n  //Load Data\n  useEffect(() => {\n    //Load data\n    if (manifest) return;\n    loadBrowseManifest().then((m) => {\n      console.log(m);\n      setManifest(m);\n    });\n  }, [manifest]);\n\n  useEffect(() => {\n    if (shoppingCart.length === 0) {\n      let cartJSON = window.sessionStorage.getItem(\"shoppingCart\");\n      console.log(\"got a cart on load hehe \", cartJSON);\n      if (cartJSON) {\n        let cart: ShoppingCartItem[] | undefined = JSON.parse(cartJSON);\n\n        if (cart) {\n          setShoppingCart(shoppingCart.concat(cart));\n        }\n      }\n    }\n  }, []);\n\n  const openSideDrawer = (newState: SideDrawerState) => {\n    if (!showSideDrawer) {\n      //Slide out\n      setSideDrawer(newState);\n      setTimeout(() => {\n        //Slide in\n        setShowSideDrawer(true);\n      }, 300);\n    } else {\n      //If already open, close for 1/2 second then open again with new obj\n\n      //Slide out\n      setShowSideDrawer(false);\n      setTimeout(() => {\n        //New content\n        setSideDrawer(newState);\n        setTimeout(() => {\n          //Slide in\n          setShowSideDrawer(true);\n        }, 250);\n      }, 250);\n    }\n  };\n  const closeDrawer = () => {\n    setShowSideDrawer(false);\n    setTimeout(() => {\n      //Slide in\n      setSideDrawer(undefined);\n    }, 300);\n  };\n\n  return (\n    <>\n      {/* page content slider */}\n      <Box\n        position=\"absolute\"\n        display=\"flex\"\n        top={0}\n        left={0}\n        height=\"100%\"\n        width=\"100%\"\n        overflow={sideDrawer ? \"hidden visible\" : \"auto\"}\n      >\n        <div\n          style={{\n            display: menuSelectState === \"Home\" ? \"contents\" : \"none\",\n          }}\n        >\n          <Box\n            m={1}\n            display=\"flex\"\n            flexDirection=\"column\"\n            width=\"100%\"\n            height=\"89%\"\n          >\n            <Home\n              show={menuSelectState === \"Home\"}\n              exiting={exitTimer}\n              key=\"home-root\"\n            />\n          </Box>\n        </div>\n\n        <div\n          style={{\n            display: menuSelectState === \"Browse\" ? \"contents\" : \"none\",\n          }}\n        >\n          <Browse\n            key=\"browse-root\"\n            show={menuSelectState === \"Browse\"}\n            exiting={exitTimer}\n            manifest={manifest}\n            setManifest={setManifest}\n            openSideDrawer={openSideDrawer}\n            shoppingCart={shoppingCart}\n          />\n        </div>\n        <div\n          style={{\n            display: menuSelectState === \"Cart\" ? \"contents\" : \"none\",\n          }}\n        >\n          <Box\n            m={1}\n            display=\"flex\"\n            flexDirection=\"column\"\n            width=\"100%\"\n            height=\"88%\"\n          >\n            <Cart\n              show={menuSelectState === \"Home\"}\n              exiting={exitTimer}\n              key=\"cart-root\"\n              shoppingCart={shoppingCart}\n              removeItemFromCart={removeItemFromCart}\n            />\n          </Box>\n        </div>\n      </Box>\n\n      {/* Backdrop Gradient, slides in on load */}\n      <Slide\n        direction=\"up\"\n        in={true}\n        timeout={{ appear: 3333, enter: 2222, exit: 333 }}\n        unmountOnExit\n        mountOnEnter\n      >\n        <Box\n          position=\"fixed\"\n          display=\"flex\"\n          top={0}\n          left={0}\n          height=\"100%\"\n          width=\"100%\"\n          maxHeight=\"100%\"\n          maxWidth=\"100%\"\n          zIndex={-100}\n          style={{\n            background: \"linear-gradient(to top,#564399, #501515)\",\n          }}\n        ></Box>\n      </Slide>\n\n      {/* Side Drawer */}\n      <Box\n        position=\"absolute\"\n        display=\"flex\"\n        flexDirection=\"row\"\n        justifyContent=\"center\"\n        // alignItems=\"center\"\n        // flexGrow={1}\n        top={0}\n        left={0}\n        height={sideDrawer ? \"100%\" : \"0%\"}\n        width={sideDrawer ? (isDesktop ? \"99%\" : \"100%\") : \"0%\"}\n        maxHeight=\"100%\"\n        // boxShadow={10}\n        maxWidth=\"100%\"\n        overflow=\"hidden\"\n      >\n        <SideDrawer\n          open={showSideDrawer ? true : false}\n          closeDrawer={closeDrawer}\n          sideDrawerData={sideDrawer}\n          shoppingCart={shoppingCart}\n          addItemToCart={addItemToCart}\n          removeItemFromCart={removeItemFromCart}\n        />\n      </Box>\n\n      {/* Menu bar div */}\n      <ButtomMenuBar\n        handleChange={handleViewChange}\n        setValue={setMenuSelectState}\n        value={menuSelectState}\n      />\n    </>\n  );\n}\n\nexport default App;\n","/home/master/nvme/limlam/store-webapp/webapp/src/app/bottomMenuBar/bottomMenuBar.tsx",[],"/home/master/nvme/limlam/store-webapp/webapp/src/app/views/home/home.tsx",[],"/home/master/nvme/limlam/store-webapp/webapp/src/app/views/browse_v3/browse.tsx",["95","96","97","98"],"import { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Box, Slide } from \"@material-ui/core\";\nimport {\n  BrowseManifest,\n  ItemData,\n  RowType,\n  ShoppingCartItem,\n} from \"./../../myTypes\";\nimport \"./browse.css\";\nimport {\n  FullSectionRow,\n  DoubleSectionRow,\n  SingleSectionRow,\n  SectionTitleRow,\n} from \"./itemSection\";\nimport { useEffect } from \"react\";\nimport { getBrowseManifest } from \"./api/getManifest\";\n\nconst useStyles = makeStyles({\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    margin: \"auto\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    overflow: \"hidden\",\n    maxWidth: 666,\n  },\n});\n\n//Retreive item manifest from server based on user fingerprint\nexport const loadBrowseManifest = async (): Promise<BrowseManifest> => {\n  getBrowseManifest().then((res) => {\n    console.log(\"server manifest\", res);\n  });\n  let x = new Promise<BrowseManifest>((res) => {\n    setTimeout(() => {\n      res({\n        rows: [\n          {\n            sectionId: 0,\n            rowId: 0,\n            rowType: RowType.sectionTitle,\n            numItems: 1,\n            items: [\n              {\n                sectionId: 0,\n                rowId: 0,\n                rowType: RowType.sectionTitle,\n                id: \"\",\n                title: \"Random\",\n                price: 0,\n                tileImg: \"\",\n                variants: [],\n                galleryImgList: [{ imgSrc: \"\", imgDesc: \"\" }],\n              },\n            ],\n          },\n          {\n            sectionId: 0,\n            rowId: 0,\n            rowType: RowType.full,\n            numItems: 1,\n            items: [\n              {\n                sectionId: 0,\n                rowId: 0,\n                rowType: RowType.full,\n                id: \"123dfdsfsdfsdf4\",\n                title: \"Shit #1\",\n                price: 59,\n                tileImg: \"/assets/images/shirt.jpg\",\n                // variantColors: [\"#324234\", \"#d33434\", \"#2332de\"],\n                variants: [\n                  {\n                    buttonColor: \"#324234\",\n                    assocGalleryImg: 0,\n                    selected: false,\n                  },\n                  {\n                    buttonColor: \"#d33434\",\n                    assocGalleryImg: 2,\n                    selected: false,\n                  },\n                  {\n                    buttonColor: \"#2332de\",\n                    assocGalleryImg: 1,\n                    selected: false,\n                  },\n                ],\n                galleryImgList: [\n                  {\n                    imgSrc: \"/assets/images/sweater.jpg\",\n                    imgDesc:\n                      \"This is a useless test description in the form of a really really long run on sentence, i hate run on sentences because they really do know how to go on forever, i guess. run on sentences suck. alot.\",\n                  },\n                  {\n                    imgSrc: \"/assets/images/1.jpg\",\n                    imgDesc:\n                      \"This is a useless test description in the form of a really really long run on sentence, i hate run on sentences because they really do know how to go on forever, i guess. run on sentences suck. alot.\",\n                  },\n                  {\n                    imgSrc: \"/assets/images/shirt.jpg\",\n                    imgDesc:\n                      \"This is a useless test description in the form of a really really long run on sentence, i hate run on sentences because they really do know how to go on forever, i guess. run on sentences suck. alot.\",\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            sectionId: 0,\n            rowId: 1,\n            rowType: RowType.double,\n            numItems: 2,\n            items: [\n              {\n                sectionId: 0,\n                rowId: 1,\n                rowType: RowType.double,\n                id: \"7b32e09c-297bd-4476-a1b0-6e640357d29f\",\n                title: \"Shit #2\",\n                price: 39,\n                tileImg: \"/assets/images/pants.jpg\",\n                variants: [\n                  {\n                    buttonColor: \"#324234\",\n                    assocGalleryImg: 0,\n                    selected: false,\n                  },\n                  {\n                    buttonColor: \"#2332de\",\n                    assocGalleryImg: 1,\n                    selected: false,\n                  },\n                  {\n                    buttonColor: \"#d33434\",\n                    assocGalleryImg: 2,\n                    selected: false,\n                  },\n                ],\n                galleryImgList: [\n                  {\n                    imgSrc: \"/assets/images/sweater.jpg\",\n                    imgDesc:\n                      \"1This is a useless test description in the form of a really really long run on sentence, i hate run on sentences because they really do know how to go on forever, i guess. run on sentences suck. alot.\",\n                  },\n                  {\n                    imgSrc: \"/assets/images/1.jpg\",\n                    imgDesc:\n                      \"2This is a useless test description in the form of a really really long run on sentence, i hate run on sentences because they really do know how to go on forever, i guess. run on sentences suck. alot.\",\n                  },\n                  {\n                    imgSrc: \"/assets/images/shirt.jpg\",\n                    imgDesc:\n                      \"3This is a useless test description in the form of a really really long run on sentence, i hate run on sentences because they really do know how to go on forever, i guess. run on sentences suck. alot.\",\n                  },\n                ],\n              },\n              {\n                sectionId: 0,\n                rowId: 1,\n                rowType: RowType.double,\n                id: \"7b32e0-297b-4476-a1b0-6e640357d29f\",\n                title: \"Shit #3\",\n                price: 13,\n                tileImg: \"/assets/images/sweater.jpg\",\n                variants: [\n                  {\n                    buttonColor: \"#324234\",\n                    assocGalleryImg: 0,\n                    selected: false,\n                  },\n                  {\n                    buttonColor: \"#2332de\",\n                    assocGalleryImg: 1,\n                    selected: false,\n                  },\n                  {\n                    buttonColor: \"#d33434\",\n                    assocGalleryImg: 2,\n                    selected: false,\n                  },\n                ],\n                galleryImgList: [\n                  {\n                    imgSrc: \"/assets/images/sweater.jpg\",\n                    imgDesc:\n                      \"1This is a useless test description in the form of a really really long run on sentence, i hate run on sentences because they really do know how to go on forever, i guess. run on sentences suck. alot.\",\n                  },\n                  {\n                    imgSrc: \"/assets/images/shirt.jpg\",\n                    imgDesc:\n                      \"2This is a useless test description in the form of a really really long run on sentence, i hate run on sentences because they really do know how to go on forever, i guess. run on sentences suck. alot.\",\n                  },\n                  {\n                    imgSrc: \"/assets/images/1.jpg\",\n                    imgDesc:\n                      \"3This is a useless test description in the form of a really really long run on sentence, i hate run on sentences because they really do know how to go on forever, i guess. run on sentences suck. alot.\",\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            sectionId: 0,\n            rowId: 2,\n            rowType: RowType.double,\n            numItems: 2,\n            items: [\n              {\n                sectionId: 0,\n                rowId: 2,\n                rowType: RowType.double,\n                id: \"7b32e09c-297b-4476-a1-6e640357d29f\",\n                title: \"Shit #4\",\n                price: 37,\n                tileImg: \"/assets/images/shirt.jpg\",\n                variants: [\n                  {\n                    buttonColor: \"#324234\",\n                    assocGalleryImg: 0,\n                    selected: false,\n                  },\n                  {\n                    buttonColor: \"#2332de\",\n                    assocGalleryImg: 1,\n                    selected: false,\n                  },\n                  {\n                    buttonColor: \"#d33434\",\n                    assocGalleryImg: 2,\n                    selected: false,\n                  },\n                ],\n                galleryImgList: [\n                  {\n                    imgSrc: \"/assets/images/1.jpg\",\n                    imgDesc:\n                      \"1This is a useless test description in the form of a really really long run on sentence, i hate run on sentences because they really do know how to go on forever, i guess. run on sentences suck. alot.\",\n                  },\n                  {\n                    imgSrc: \"/assets/images/shirt.jpg\",\n                    imgDesc:\n                      \"2This is a useless test description in the form of a really really long run on sentence, i hate run on sentences because they really do know how to go on forever, i guess. run on sentences suck. alot.\",\n                  },\n                  {\n                    imgSrc: \"/assets/images/sweater.jpg\",\n                    imgDesc:\n                      \"3This is a useless test description in the form of a really really long run on sentence, i hate run on sentences because they really do know how to go on forever, i guess. run on sentences suck. alot.\",\n                  },\n                ],\n              },\n              {\n                sectionId: 0,\n                rowId: 2,\n                rowType: RowType.double,\n                id: \"7b32e09c-297b-4476-a0-6e640357d29f\",\n                title: \"Shit #5\",\n                price: 69,\n                tileImg: \"/assets/images/1.jpg\",\n                variants: [\n                  {\n                    buttonColor: \"#324234\",\n                    assocGalleryImg: 0,\n                    selected: false,\n                  },\n                  {\n                    buttonColor: \"#2332de\",\n                    assocGalleryImg: 1,\n                    selected: false,\n                  },\n                ],\n                galleryImgList: [\n                  {\n                    imgSrc: \"/assets/images/sweater.jpg\",\n                    imgDesc:\n                      \"1This is a useless test description in the form of a really really long run on sentence, i hate run on sentences because they really do know how to go on forever, i guess. run on sentences suck. alot.\",\n                  },\n                  {\n                    imgSrc: \"/assets/images/1.jpg\",\n                    imgDesc:\n                      \"2This is a useless test description in the form of a really really long run on sentence, i hate run on sentences because they really do know how to go on forever, i guess. run on sentences suck. alot.\",\n                  },\n                  {\n                    imgSrc: \"/assets/images/shirt.jpg\",\n                    imgDesc:\n                      \"3This is a useless test description in the form of a really really long run on sentence, i hate run on sentences because they really do know how to go on forever, i guess. run on sentences suck. alot.\",\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            sectionId: 0,\n            rowId: 3,\n            rowType: RowType.full,\n            numItems: 1,\n            items: [\n              {\n                sectionId: 0,\n                rowId: 3,\n                rowType: RowType.full,\n                id: \"1234\",\n                title: \"Shit #6\",\n                price: 21,\n                tileImg: \"/assets/images/shirt.jpg\",\n                variants: [\n                  {\n                    buttonColor: \"#324234\",\n                    assocGalleryImg: 0,\n                    selected: false,\n                  },\n                ],\n                galleryImgList: [\n                  {\n                    imgSrc: \"/assets/images/shirt.jpg\",\n                    imgDesc:\n                      \"1This is a useless test description in the form of a really really long run on sentence, i hate run on sentences because they really do know how to go on forever, i guess. run on sentences suck. alot.\",\n                  },\n                  {\n                    imgSrc: \"/assets/images/sweater.jpg\",\n                    imgDesc:\n                      \"2This is a useless test description in the form of a really really long run on sentence, i hate run on sentences because they really do know how to go on forever, i guess. run on sentences suck. alot.\",\n                  },\n                  {\n                    imgSrc: \"/assets/images/1.jpg\",\n                    imgDesc:\n                      \"3This is a useless test description in the form of a really really long run on sentence, i hate run on sentences because they really do know how to go on forever, i guess. run on sentences suck. alot.\",\n                  },\n                ],\n              },\n            ],\n          },\n        ],\n      });\n    }, 1000); // Simulated 5 sec response time :(\n  });\n  return x;\n};\n\ninterface BrowseProps {\n  show: boolean;\n  exiting: boolean;\n  openSideDrawer: Function;\n  setManifest: Function;\n  manifest: BrowseManifest | undefined;\n  shoppingCart: ShoppingCartItem[];\n}\n\nexport default function Browse({\n  show,\n  exiting,\n  openSideDrawer,\n  manifest,\n  setManifest,\n  shoppingCart,\n}: BrowseProps) {\n  const classes = useStyles();\n\n  // const div = useRef(null);\n\n  // function loadRowAnimationController(m: BrowseManifest) {\n  //   //   ReactDOM.createPortal(<p>hello</p>, browseDiv);\n  //   // let browseDiv = document.getElementById(\"browseDiv\");\n  //   // browseDiv?.append(<>hello</>);\n\n  // }\n  const [loaded, setLoaded] = useState<boolean>(false);\n  const [slideIn, setSlideIn] = useState<boolean>(false);\n  const [elems, setElems] = useState<JSX.Element>(<></>);\n\n  useEffect(() => {\n    setSlideIn(loaded ? show : false);\n  }, [show, loaded]);\n\n  useEffect(() => {\n    if (!show || !loaded || !exiting) return;\n    setSlideIn(false);\n  }, [exiting]);\n\n  useEffect(() => {\n    if (slideIn) {\n      setTimeout(() => {\n        console.log();\n      }, 1000);\n    }\n  }, [slideIn]);\n\n  useEffect(() => {\n    if (!manifest) return;\n    let offset: number = 500;\n    console.log(\"loaded\");\n    setElems(\n      <>\n        {manifest ? (\n          manifest.rows.map((row, i) => {\n            console.log(\"running\");\n            switch (row.rowType) {\n              case RowType.sectionTitle:\n                // console.log(row);\n                return <SectionTitleRow title={row.items[0].title} />;\n              case RowType.full:\n                // console.log(row);\n                return (\n                  <FullSectionRow\n                    rowId={row.rowId}\n                    sectionId={row.sectionId}\n                    key={`section_${row.sectionId}_fullrow_${row.rowId}`}\n                    itemData={row.items[0]}\n                    openSideDrawer={openSideDrawer}\n                    animationDelay={manifest.rows.length * offset - offset * i}\n                  />\n                );\n              case RowType.double:\n                // console.log(\"row\", row);\n                return (\n                  <DoubleSectionRow\n                    key={`section_${row.sectionId}_doublerow_${row.rowId}`}\n                    sectionId={row.sectionId}\n                    rowId={row.rowId}\n                    leftItemData={row.items[0]}\n                    rightItemData={row.items[1]}\n                    openSideDrawer={openSideDrawer}\n                    animationDelay={manifest.rows.length * offset - offset * i}\n                  />\n                );\n              case RowType.single:\n                // console.log(\"row\", row);\n                return (\n                  <SingleSectionRow\n                    key={`section_${row.sectionId}_singlerow_${row.rowId}`}\n                    itemData={row.items[0]}\n                    sectionId={row.sectionId}\n                    rowId={row.rowId}\n                    openSideDrawer={openSideDrawer}\n                  />\n                );\n            }\n          })\n        ) : (\n          <></>\n        )}\n      </>\n    );\n    setLoaded(true);\n  }, [manifest]);\n\n  return (\n    <Box className={classes.root}>\n      <Slide\n        in={slideIn}\n        direction=\"up\"\n        timeout={{ enter: 2222, appear: 1111, exit: 300 }}\n        // mountOnEnter\n        // unmountOnExit\n      >\n        <div>{elems}</div>\n      </Slide>\n      {/* Section One Title */}\n      {/* {browseDiv} */}\n      {/* <div ref={div} id={\"browseDiv\"}></div> */}\n\n      {/* Extra room to accomodate overflow   */}\n      <Box height={66}></Box>\n    </Box>\n  );\n}\n\n// {manifest !== undefined ? (\n//   <>\n//     {/* Iterate over sections and construct them */}\n//     {manifest.rows.map((row) => {\n//       // <Section\n//       //   key={`section_${section.sectionId}`}\n//       //   sectionData={section}\n//       //   openSideDrawer={openSideDrawer}\n//       //   sectionRefKey={v4()}\n//       // />\n//       switch (row.rowType) {\n//         case RowType.sectionTitle:\n//           console.log(row);\n//           return <SectionTitleRow title={row.items[0].title} />;\n//         case RowType.full:\n//           console.log(row);\n//           return (\n//             <FullSectionRow\n//               rowId={row.rowId}\n//               sectionId={row.sectionId}\n//               key={`section_${row.sectionId}_fullrow_${row.rowId}`}\n//               itemData={row.items[0]}\n//               openSideDrawer={openSideDrawer}\n//             />\n//           );\n//         case RowType.double:\n//           console.log(\"row\", row);\n//           return (\n//             <DoubleSectionRow\n//               key={`section_${row.sectionId}_doublerow_${row.rowId}`}\n//               sectionId={row.sectionId}\n//               rowId={row.rowId}\n//               leftItemData={row.items[0]}\n//               rightItemData={row.items[1]}\n//               openSideDrawer={openSideDrawer}\n//             />\n//           );\n//         case RowType.single:\n//           console.log(\"row\", row);\n\n//           return (\n//             <SingleSectionRow\n//               key={`section_${row.sectionId}_singlerow_${row.rowId}`}\n//               itemData={row.items[0]}\n//               sectionId={row.sectionId}\n//               rowId={row.rowId}\n//               openSideDrawer={openSideDrawer}\n//             />\n//           );\n//       }\n//     })}\n//   </>\n// ) : (\n//   <h1>loading</h1>\n// )}\n// return (\n//   <Box className={classes.root}>\n//     {manifest !== undefined ? (\n//       <>\n//         {/* Iterate over sections and construct them */}\n//         {manifest.browseMap.map((section) => (\n//           <Section key={`section_${section.sectionId}`} sectionData={section}>\n//             <>\n//               {/* Render out browse map by row type */}\n//               {section.rows.map((row, i) => {\n//                 switch (row.rowType) {\n//                   case RowType.full:\n//                     console.log(row);\n//                     return (\n//                       <FullSectionRow\n//                         rowId={row.rowId}\n//                         sectionId={row.sectionId}\n//                         key={`section_${section.sectionId}_fullrow_${row.rowId}`}\n//                         itemData={row.items[0]}\n//                         openSideDrawer={openSideDrawer}\n//                       />\n//                     );\n//                   case RowType.double:\n//                     console.log(\"row\", row);\n//                     return (\n//                       <DoubleSectionRow\n//                         key={`section_${section.sectionId}_doublerow_${row.rowId}`}\n//                         sectionId={row.sectionId}\n//                         rowId={row.rowId}\n//                         leftItemData={row.items[0]}\n//                         rightItemData={row.items[1]}\n//                         openSideDrawer={openSideDrawer}\n//                       />\n//                     );\n//                   case RowType.single:\n//                     console.log(\"row\", row);\n\n//                     return (\n//                       <SingleSectionRow\n//                         key={`section_${section.sectionId}_singlerow_${row.rowId}`}\n//                         itemData={row.items[0]}\n//                         sectionId={row.sectionId}\n//                         rowId={row.rowId}\n//                         openSideDrawer={openSideDrawer}\n//                       />\n//                     );\n//                 }\n//               })}\n//             </>\n//           </Section>\n//         ))}\n//       </>\n//     ) : (\n//       <h1>loading</h1>\n//     )}\n\n//     {/* Section One Title */}\n\n//     {/* Extra room to accomodate overflow   */}\n//     <Box height={66}></Box>\n//   </Box>\n// );\n","/home/master/nvme/limlam/store-webapp/webapp/src/app/views/cart/cart.tsx",["99"],"import { useState } from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport { useEffect } from \"react\";\nimport MyCart from \"./mycart\";\nimport Checkout from \"./checkout\";\nimport { ItemData, ShoppingCartItem } from \"../../myTypes\";\n\ninterface HomeProps {\n  show: boolean;\n  exiting: boolean;\n  shoppingCart: ShoppingCartItem[];\n  removeItemFromCart: Function;\n}\n\nexport default function Home({\n  show,\n  exiting,\n  shoppingCart,\n  removeItemFromCart,\n}: HomeProps) {\n  const [slideIn, setSlideIn] = useState<boolean>(false);\n  const [currentView, setCurrentView] = useState<\"cart\" | \"checkout\">(\"cart\");\n\n  useEffect(() => {\n    setSlideIn(show);\n  }, [show]);\n  useEffect(() => {\n    setSlideIn(!exiting);\n  }, [exiting]);\n\n  const changeView = (v: \"cart\" | \"checkout\") => {\n    //Slide out animation\n    setSlideIn(false);\n    //Change after out\n    setTimeout(() => {\n      setCurrentView(v);\n      //Slide Back in\n      setTimeout(() => {\n        setSlideIn(true);\n      }, 100);\n    }, 888);\n  };\n\n  return (\n    <Box\n      display=\"flex\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      width=\"100%\"\n      height=\"100%\"\n      overflow=\"hidden\"\n    >\n      <div style={{ display: currentView === \"cart\" ? \"contents\" : \"none\" }}>\n        <MyCart\n          shoppingCart={shoppingCart}\n          removeItemFromCart={removeItemFromCart}\n          slideIn={slideIn}\n          changeView={changeView}\n        />\n      </div>\n      <div\n        style={{ display: currentView === \"checkout\" ? \"contents\" : \"none\" }}\n      >\n        <Checkout slideIn={slideIn} changeView={changeView} />\n      </div>\n    </Box>\n  );\n}\n","/home/master/nvme/limlam/store-webapp/webapp/src/app/views/drawer_v2/drawer.tsx",["100"],"import { Box, Fade, useMediaQuery } from \"@material-ui/core\";\n\nimport { ItemData, ShoppingCartItem, SideDrawerState } from \"../../myTypes\";\n\nimport { ItemContentDesktop } from \"./desktopContent\";\n\nimport { ItemContentMobile } from \"./mobileContent\";\n\nexport interface SideDrawerProps {\n  open: boolean;\n  closeDrawer: Function;\n  sideDrawerData: SideDrawerState | undefined;\n  addItemToCart: Function;\n  removeItemFromCart: Function;\n  shoppingCart: ShoppingCartItem[];\n}\n\nexport const SideDrawer = ({\n  open,\n  closeDrawer,\n  sideDrawerData,\n  addItemToCart,\n  shoppingCart,\n  removeItemFromCart,\n}: SideDrawerProps) => {\n  let isWideScreen = useMediaQuery(\"(min-width: 600px)\");\n  let isDesktop = useMediaQuery(\"(min-aspect-ratio: 6/5)\");\n\n  return (\n    <Fade\n      in={sideDrawerData ? open : false}\n      timeout={{ appear: 1000, enter: 444, exit: 555 }}\n    >\n      {/* Drawer Main Box */}\n      <Box\n        position=\"absolute\"\n        top={0}\n        left={0}\n        height={window.innerHeight}\n        width=\"100%\"\n        maxWidth=\"100%\"\n        boxShadow={10}\n        maxHeight={isDesktop ? \"90%\" : \"100%\"}\n        display=\"flex\"\n        flexDirection=\"column\"\n        justifyContent={isDesktop ? \"center\" : \"center\"}\n        alignItems=\"center\"\n        // border={4}\n        // m={1}\n        style={{\n          backdropFilter: \"blur(8px)\",\n          background: \"rgba(0, 0, 0, .5)\",\n        }}\n        overflow=\"auto\n        \"\n      >\n        {/* Content with margin */}\n        <Box\n          display=\"flex\"\n          m={1}\n          maxWidth={isWideScreen ? \"1200px\" : \"100%\"}\n          maxHeight=\"100%\"\n          borderRadius={8}\n          // border={1}\n          // overflow=\"auto\"\n        >\n          {sideDrawerData ? (\n            <div>\n              {isDesktop ? (\n                <ItemContentDesktop\n                  removeItemFromCart={removeItemFromCart}\n                  shoppingCart={shoppingCart}\n                  addItemToCart={addItemToCart}\n                  closeDrawer={closeDrawer}\n                  sideDrawerData={sideDrawerData}\n                />\n              ) : (\n                <ItemContentMobile\n                  removeItemFromCart={removeItemFromCart}\n                  shoppingCart={shoppingCart}\n                  addItemToCart={addItemToCart}\n                  closeDrawer={closeDrawer}\n                  sideDrawerData={sideDrawerData}\n                />\n              )}\n            </div>\n          ) : (\n            <></>\n          )}\n        </Box>\n        {/* Bottom action buttons */}\n      </Box>\n    </Fade>\n  );\n};\n\nexport interface ItemContentProps {\n  sideDrawerData: SideDrawerState;\n  closeDrawer: Function;\n  addItemToCart: Function;\n  removeItemFromCart: Function;\n  shoppingCart: ShoppingCartItem[];\n}\n","/home/master/nvme/limlam/store-webapp/webapp/src/app/views/home/logo.tsx",["101"],"import { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Box,\n  Slide,\n  Typography,\n  Fade,\n  useMediaQuery,\n  Divider,\n  Button,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  headerText: {\n    color: \"#ffffff\",\n    // fontFamily: '\"Raleway\"',\n    fontSize: 18,\n    \"@media (min-width:800px)\": {\n      fontSize: 320,\n    },\n    \"@media (max-width:800px)\": {\n      fontSize: 255,\n    },\n    \"@media (max-width:700px)\": {\n      fontSize: 222,\n    },\n    \"@media (max-width:600px)\": {\n      fontSize: 200,\n    },\n    \"@media (max-width:500px)\": {\n      fontSize: 133,\n    },\n    \"@media (max-width:325px)\": {\n      fontSize: 99,\n    },\n  },\n  headerSubtext: {\n    color: \"#ffffff\",\n    // fontFamily: '\"Raleway\"',\n  },\n  button: {\n    \"@media (min-width:800px)\": {\n      fontSize: 24,\n    },\n    \"@media (max-width:800px)\": {\n      fontSize: 24,\n    },\n    \"@media (max-width:700px)\": {\n      fontSize: 24,\n    },\n    \"@media (max-width:600px)\": {\n      fontSize: 22,\n    },\n    \"@media (max-width:500px)\": {\n      fontSize: 16,\n    },\n    \"@media (max-width:325px)\": {\n      fontSize: 11,\n    },\n  },\n});\n\nexport interface LogoProps {\n  slideIn: boolean;\n  changeView: Function;\n}\n\nexport default function Logo({ slideIn, changeView }: LogoProps) {\n  const classes = useStyles();\n\n  const isDesktop = useMediaQuery(\"(min-aspect-ratio: 6/5)\");\n\n  return (\n    <Box\n      display=\"flex\"\n      m={1}\n      // border={1}\n      flexDirection=\"column\"\n      // overflow=\"hidden\"\n      justifyContent=\"center\"\n      maxWidth={666}\n      width=\"98%\"\n      height=\"100%\"\n    >\n      <Box\n        display=\"flex\"\n        m={1}\n        flexDirection={isDesktop ? \"row\" : \"column\"}\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        flexGrow={1}\n      >\n        <Slide\n          in={slideIn}\n          timeout={{ enter: 888, appear: 888, exit: 333 }}\n          direction=\"right\"\n        >\n          <Typography\n            variant=\"h1\"\n            align=\"center\"\n            className={classes.headerText}\n          >\n            theoretic\n          </Typography>\n        </Slide>\n      </Box>\n      <br />\n      {/* Info Action Area */}\n      <Slide\n        in={slideIn}\n        direction=\"up\"\n        timeout={{ appear: 1000, enter: 1000, exit: 333 }}\n      >\n        <Box\n          display=\"flex\"\n          m={1}\n          flexDirection=\"column\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n        >\n          {/* <Fade in={slideIn} timeout={{ enter: 3333, appear: 3333, exit: 333 }}>\n            <Divider style={{ color: \"#ffffff\", width: \"66%\" }} />\n          </Fade> */}\n          <Box\n            display=\"flex\"\n            m={1}\n            color=\"#ffffff\"\n            flexDirection=\"row\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            overflow=\"hidden\"\n          >\n            <Fade\n              in={slideIn}\n              timeout={{ enter: 2222, appear: 2222, exit: 333 }}\n            >\n              <Button\n                size={isDesktop ? \"large\" : \"small\"}\n                onClick={() => {\n                  changeView(\"about\");\n                }}\n              >\n                <Typography\n                  variant=\"subtitle1\"\n                  noWrap\n                  className={classes.button}\n                >\n                  about us\n                </Typography>\n              </Button>\n            </Fade>\n\n            <Fade\n              in={slideIn}\n              timeout={{ enter: 3333, appear: 3333, exit: 333 }}\n            >\n              <Typography variant=\"subtitle1\" className={classes.button}>\n                |\n              </Typography>\n            </Fade>\n            <Fade\n              in={slideIn}\n              timeout={{ enter: 2222, appear: 2222, exit: 333 }}\n            >\n              <Button size=\"small\">\n                <Typography variant=\"subtitle1\" className={classes.button}>\n                  careers\n                </Typography>\n              </Button>\n            </Fade>\n\n            <Fade\n              in={slideIn}\n              timeout={{ enter: 3333, appear: 3333, exit: 333 }}\n            >\n              <Typography variant=\"subtitle1\" className={classes.button}>\n                |\n              </Typography>\n            </Fade>\n            <Fade\n              in={slideIn}\n              timeout={{ enter: 2222, appear: 2222, exit: 333 }}\n            >\n              <Button size=\"small\">\n                <Typography variant=\"subtitle1\" className={classes.button}>\n                  policies\n                </Typography>\n              </Button>\n            </Fade>\n          </Box>\n        </Box>\n      </Slide>\n      {/* <Slide\n        in={slideIn}\n        direction=\"up\"\n        timeout={{ appear: 1000, enter: 1000, exit: 333 }}\n      >\n        <Box\n          height=\"10%\"\n          display=\"flex\"\n          flexDirection=\"row\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          m={1}\n        >\n          <Box display=\"flex\" m={1}>\n            <Fade in={slideIn} timeout={2500}>\n              <Button\n                variant=\"text\"\n                size={isDesktop ? \"large\" : \"small\"}\n                onClick={() => {\n                  changeView(\"about\");\n                }}\n              >\n                <Typography\n                  variant=\"h5\"\n                  align=\"center\"\n                  style={{\n                    // fontSize: 22,\n                    color: \"#ffffff\",\n                  }}\n                >\n                  about us\n                </Typography>\n              </Button>\n            </Fade>\n          </Box>\n\n          <Box display=\"flex\" m={1}>\n            <Fade in={slideIn} timeout={3333}>\n              <Button size=\"large\" onClick={() => {}}>\n                <Typography\n                  variant=\"h5\"\n                  align=\"center\"\n                  style={{\n                    color: \"#ffffff\",\n                  }}\n                >\n                  checkout\n                </Typography>\n              </Button>\n            </Fade>\n          </Box>\n        </Box>\n      </Slide> */}\n    </Box>\n  );\n}\n","/home/master/nvme/limlam/store-webapp/webapp/src/app/views/home/aboutus.tsx",[],"/home/master/nvme/limlam/store-webapp/webapp/src/app/myTypes.tsx",[],"/home/master/nvme/limlam/store-webapp/webapp/src/app/views/browse_v3/itemSection.tsx",["102","103","104"],"import { Typography, Box, Fade } from \"@material-ui/core\";\nimport { ItemData, ShoppingCartItem, SideDrawerState } from \"./../../myTypes\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { createRipple } from \"./lib/ripple\";\nimport { useMediaQuery } from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\n\nimport { ShoppingCartRounded } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles({\n  tile: {\n    maxWidth: \"98%\",\n    width: \"98%\",\n    borderRadius: 6,\n    // height: \"95%\",\n    overflow: \"hidden\",\n    position: \"relative\",\n    // zIndex: 1060,\n  },\n  tileBar: {\n    // zIndex: 1090,\n    position: \"relative\",\n    // bottom: 2,\n    background:\n      \"linear-gradient(to top, rgba(0,0,0,0.5) 0%, rgba(0,0,0,0.3) 50%, rgba(0,0,0,0.2) 75%, rgba(0,0,0,0) 100%)\",\n    // zIndex: 1065,\n  },\n});\n\n//Full width, double hieght tile\nexport interface SectionTitleRowProps {\n  title: string;\n}\nexport const SectionTitleRow = ({ title }: SectionTitleRowProps) => {\n  return (\n    <Box display=\"flex\" flexDirection=\"row\" justifyContent={\"space-around\"}>\n      <Typography\n        variant=\"h1\"\n        style={{ color: \"#ffffff\", fontSize: 110, margin: 10 }}\n        align=\"center\"\n      >\n        {title}\n      </Typography>\n    </Box>\n  );\n};\n//Full width, double hieght tile\nexport interface FullSectionRowProps {\n  rowId: number;\n  sectionId: number;\n  itemData: ItemData;\n  children?: JSX.Element;\n  openSideDrawer: Function;\n  animationDelay: number;\n}\nexport const FullSectionRow = ({\n  itemData,\n  animationDelay,\n  rowId,\n  sectionId,\n  openSideDrawer,\n}: FullSectionRowProps) => {\n  const classes = useStyles();\n  const click = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    //Create inital side view state\n    let sideViewObj: SideDrawerState = {\n      itemData: itemData,\n    };\n    //Send to reducer\n    openSideDrawer(sideViewObj);\n    //Ripple animation\n    createRipple(event);\n  };\n\n  const [inCart, setinCart] = useState(false);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      let cartJSON = window.sessionStorage.getItem(\"shoppingCart\");\n      if (cartJSON) {\n        let cart: ShoppingCartItem[] = JSON.parse(cartJSON);\n        if (cart.length > 0) {\n          setinCart(\n            cart.find((cartItem) => cartItem.item.id === itemData.id) !==\n              undefined\n              ? true\n              : false\n          );\n        } else {\n          setinCart(false);\n        }\n      }\n    }, 222);\n    return () => clearInterval(interval);\n  }, []);\n\n  // const [show, setShow] = useState(false);\n  // useEffect(() => {\n  //   setTimeout(() => {\n  //     setShow(true);\n  //   }, 1111);\n  // }, []);\n\n  return (\n    <Box display=\"flex\" flexDirection=\"row\" justifyContent={\"space-around\"}>\n      <Fade in={true}>\n        <Box\n          className={classes.tile}\n          // border={2}\n          boxShadow={5}\n          height={useMediaQuery(\"(min-width:600px)\") ? 400 : 275}\n          width=\"100%\"\n          m={0.5}\n          onClick={(e) => click(e)}\n          overflow=\"hidden\"\n          // border={1}\n        >\n          <Fade\n            in={inCart}\n            timeout={{ appear: 444, enter: 444, exit: 333 }}\n            unmountOnExit\n            mountOnEnter\n          >\n            <Box\n              // visibility={inCart ? \"visible\" : \"hidden\"}\n              position=\"absolute\"\n              display=\"flex\"\n              width=\"100%\"\n              height=\"100%\"\n              borderRadius={6}\n              // border={1}\n              style={{\n                backdropFilter: \"blur(6px)\",\n                background: \"rgba(0,0,0, 0.2)\",\n              }}\n            >\n              <Box m={1}>\n                <ShoppingCartRounded\n                  style={{ fontSize: 55, color: \"#ffffff\" }}\n                />\n              </Box>\n            </Box>\n          </Fade>\n\n          <Box display=\"flex\" height={\"80%\"}>\n            <img\n              src={itemData.tileImg}\n              alt={\"\"}\n              style={{ width: \"100%\", height: \"125%\" }}\n            />\n          </Box>\n\n          <Box\n            display=\"flex\"\n            height={\"20%\"}\n            borderRadius={0}\n            className={classes.tileBar}\n          >\n            <Typography variant={\"h3\"} style={{ color: \"#ffffff\" }}>\n              &nbsp;&nbsp;${itemData.price}\n            </Typography>\n          </Box>\n        </Box>\n      </Fade>\n    </Box>\n  );\n};\n\n//Double tile row\nexport interface DoubleSectionRowProps {\n  animationDelay: number;\n  rowId: number;\n  sectionId: number;\n  rightItemData: ItemData;\n  leftItemData: ItemData;\n  children?: JSX.Element;\n  openSideDrawer: Function;\n}\nexport const DoubleSectionRow = ({\n  rightItemData,\n  leftItemData,\n  rowId,\n  sectionId,\n\n  animationDelay,\n  openSideDrawer,\n}: DoubleSectionRowProps) => {\n  const classes = useStyles();\n\n  const click = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>,\n    leftItem: boolean\n  ) => {\n    //Create inital side view state\n    let sideViewObj: SideDrawerState = {\n      itemData: leftItem ? leftItemData : rightItemData,\n    };\n    //Send to reducer\n    openSideDrawer(sideViewObj);\n    //Ripple animation\n    createRipple(event);\n  };\n\n  // const [show, setShow] = useState(false);\n  // useEffect(() => {\n  //   setTimeout(() => {\n  //     setShow(true);\n  //   }, 555);\n  // }, []);\n\n  const [leftInCart, setLeftInCart] = useState(false);\n  const [rightInCart, setRightInCart] = useState(false);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      let cartJSON = window.sessionStorage.getItem(\"shoppingCart\");\n      if (cartJSON) {\n        let cart: ShoppingCartItem[] = JSON.parse(cartJSON);\n        setLeftInCart(\n          cart.find((cartItem) => cartItem.item.id === leftItemData.id)\n            ? true\n            : false\n        );\n\n        setRightInCart(\n          cart.find((cartItem) => cartItem.item.id === rightItemData.id)\n            ? true\n            : false\n        );\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <Box display=\"flex\" flexDirection=\"row\" justifyContent={\"space-around\"}>\n      <Fade in={true}>\n        <Box\n          className={classes.tile}\n          // border={2}\n          boxShadow={5}\n          width=\"100%\"\n          height={useMediaQuery(\"(min-width:600px)\") ? 200 : 130}\n          m={0.5}\n          onClick={(e) => click(e, true)}\n        >\n          <Fade\n            in={leftInCart}\n            timeout={{ appear: 444, enter: 444, exit: 333 }}\n          >\n            <Box\n              // visibility={inCart ? \"visible\" : \"hidden\"}\n              position=\"absolute\"\n              display=\"flex\"\n              width=\"100%\"\n              height=\"100%\"\n              borderRadius={6}\n              // border={1}\n              style={{\n                backdropFilter: \"blur(6px)\",\n                background: \"rgba(0,0,0, 0.2)\",\n              }}\n            >\n              <Box m={1}>\n                <ShoppingCartRounded\n                  style={{ fontSize: 55, color: \"#ffffff\" }}\n                />\n              </Box>\n            </Box>\n          </Fade>\n\n          <Box display=\"flex\" height={\"77%\"}>\n            <img\n              src={leftItemData.tileImg}\n              alt={\"\"}\n              style={{ width: \"100%\", height: \"130%\" }}\n            />\n          </Box>\n\n          <Box\n            display=\"flex\"\n            height={\"24%\"}\n            // border={2}\n            borderRadius={0}\n            className={classes.tileBar}\n          >\n            <Typography variant={\"h5\"} style={{ color: \"#ffffff\" }}>\n              &nbsp;&nbsp;${rightItemData.price}\n            </Typography>\n          </Box>\n        </Box>\n      </Fade>\n      <Fade in={true} timeout={500}>\n        <Box\n          className={classes.tile}\n          // border={2}\n          boxShadow={10}\n          width=\"100%\"\n          // maxWidth=\"%50\"\n          height={useMediaQuery(\"(min-width:600px)\") ? 200 : 130}\n          m={0.5}\n          onClick={(e) => click(e, false)}\n          key={`${sectionId}_${rowId}_rightTile`}\n        >\n          <Fade\n            in={rightInCart}\n            timeout={{ appear: 444, enter: 444, exit: 333 }}\n          >\n            <Box\n              // visibility={inCart ? \"visible\" : \"hidden\"}\n              position=\"absolute\"\n              display=\"flex\"\n              width=\"100%\"\n              height=\"100%\"\n              borderRadius={6}\n              // border={3}\n              style={{\n                backdropFilter: \"blur(6px)\",\n                background: \"rgba(0,0,0, 0.2)\",\n              }}\n            >\n              <Box m={1}>\n                <ShoppingCartRounded\n                  style={{ fontSize: 55, color: \"#ffffff\" }}\n                />\n              </Box>\n            </Box>\n          </Fade>\n          <Box display=\"flex\" height={\"77%\"}>\n            <img\n              src={rightItemData.tileImg}\n              alt={\"\"}\n              style={{ width: \"100%\", height: \"130%\" }}\n            />\n          </Box>\n\n          <Box\n            display=\"flex\"\n            height={\"24%\"}\n            // border={2}\n            borderRadius={0}\n            className={classes.tileBar}\n          >\n            <Typography variant={\"h5\"} style={{ color: \"#ffffff\" }}>\n              &nbsp;&nbsp;${rightItemData.price}\n            </Typography>\n          </Box>\n        </Box>\n      </Fade>\n    </Box>\n  );\n};\n\n//Single right aligned tile\nexport interface SingleSectionRowProps {\n  rowId: number;\n\n  itemData: ItemData;\n  children?: JSX.Element;\n  openSideDrawer: Function;\n  sectionId: number;\n}\nexport const SingleSectionRow = ({\n  itemData,\n  rowId,\n  openSideDrawer,\n  sectionId,\n}: SingleSectionRowProps) => {\n  const classes = useStyles();\n\n  return <Box></Box>;\n};\n","/home/master/nvme/limlam/store-webapp/webapp/src/app/views/cart/checkout.tsx",[],"/home/master/nvme/limlam/store-webapp/webapp/src/app/views/cart/mycart.tsx",["105"],"import { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Box,\n  Slide,\n  Typography,\n  Fade,\n  Divider,\n  IconButton,\n  Button,\n} from \"@material-ui/core\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport { DeleteOutline } from \"@material-ui/icons\";\nimport { ItemData, ShoppingCartItem } from \"../../myTypes\";\n\nconst useStyles = makeStyles({\n  headerText: {\n    color: \"#ffffff\",\n    // fontFamily: '\"Raleway\"',\n  },\n  headerSubtext: {\n    color: \"#ffffff\",\n    // fontFamily: '\"Raleway\"',\n  },\n  table: {\n    // minWidth: 650,\n    overflow: \"hidden\",\n  },\n});\n\nexport interface MyCartProps {\n  slideIn: boolean;\n  changeView: Function;\n  shoppingCart: ShoppingCartItem[];\n  removeItemFromCart: Function;\n}\n\nexport default function MyCart({\n  slideIn,\n  changeView,\n  shoppingCart,\n  removeItemFromCart,\n}: MyCartProps) {\n  const classes = useStyles();\n\n  // const [showCart, setShowCart] = useState<boolean>(slideIn);\n\n  // const removeItem = (item: ItemData) => {\n  //   setShowCart(false);\n  //   setTimeout(() => {\n  //     removeItemFromCart(item);\n  //   }, 200);\n  //   setTimeout(() => {\n  //     setShowCart(true);\n  //   }, 1000);\n  // };\n\n  return (\n    <Box\n      display=\"flex\"\n      m={1}\n      // border={1}\n      flexDirection=\"column\"\n      // overflow=\"hidden\"\n      justifyContent=\"space-between\"\n      maxWidth={666}\n      width=\"98%\"\n      height=\"100%\"\n    >\n      <Box display=\"flex\" m={3} flexDirection=\"row\" justifyContent=\"center\">\n        <Slide\n          in={slideIn}\n          timeout={{ enter: 888, appear: 888, exit: 333 }}\n          direction=\"left\"\n          unmountOnExit\n          mountOnEnter\n        >\n          <Typography\n            variant=\"h2\"\n            align=\"center\"\n            className={classes.headerText}\n          >\n            Shopping Cart\n          </Typography>\n        </Slide>\n      </Box>\n      <Box display=\"flex\" m={1} flexDirection=\"column\" flexGrow={1}>\n        <Fade in={slideIn} timeout={{ enter: 888, appear: 888, exit: 333 }}>\n          <Box display=\"flex\" m={1} flexDirection=\"column\" overflow=\"hidden\">\n            <Divider />\n            <TableContainer>\n              <Table size=\"medium\" aria-label=\"a dense table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>\n                      <Typography variant=\"subtitle1\">Item</Typography>\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      <Typography variant=\"subtitle1\">Price</Typography>\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      <Typography variant=\"subtitle1\">Quantity</Typography>\n                    </TableCell>\n                    <TableCell align=\"right\"></TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {shoppingCart.map((cartItem, i) => {\n                    return (\n                      <Fade\n                        in={slideIn}\n                        timeout={1500 + i * 500}\n                        unmountOnExit\n                        mountOnEnter\n                      >\n                        <TableRow key={cartItem.item.title}>\n                          <TableCell component=\"th\" scope=\"row\">\n                            <Typography variant=\"subtitle1\">\n                              {cartItem.item.title}\n                            </Typography>\n                          </TableCell>\n                          <TableCell align=\"right\">\n                            <Typography variant=\"subtitle1\">\n                              {cartItem.item.price}\n                            </Typography>\n                          </TableCell>\n                          <TableCell align=\"center\">\n                            <Typography variant=\"subtitle1\">{1}</Typography>\n                          </TableCell>\n                          <TableCell align=\"right\">\n                            <IconButton\n                              onClick={() => {\n                                removeItemFromCart(cartItem.item);\n                              }}\n                            >\n                              <DeleteOutline\n                                style={{ fontSize: 24, color: \"red\" }}\n                              />\n                            </IconButton>\n                          </TableCell>\n                        </TableRow>\n                      </Fade>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Box>\n        </Fade>\n        <Fade in={slideIn}>\n          {shoppingCart.length === 0 ? (\n            <Box\n              display=\"flex\"\n              m={1}\n              flexDirection=\"row\"\n              justifyContent=\"center\"\n              overflow=\"hidden\"\n            >\n              <Typography variant=\"subtitle1\" style={{ opacity: 0.4 }}>\n                Your shopping cart is empty!\n              </Typography>\n            </Box>\n          ) : (\n            <Box></Box>\n          )}\n        </Fade>\n      </Box>\n\n      {/* Checkout button */}\n\n      <Slide\n        in={slideIn}\n        direction=\"up\"\n        timeout={{ appear: 1000, enter: 1000, exit: 333 }}\n      >\n        {/* Outer container */}\n        <Box height=\"10%\" display=\"flex\" flexDirection=\"row-reverse\">\n          {/* Info Action Area */}\n\n          <Fade in={slideIn} timeout={{ enter: 2222, appear: 2222, exit: 333 }}>\n            <Button size=\"large\" disabled onClick={() => {}}>\n              <Typography\n                variant=\"subtitle1\"\n                style={{\n                  // fontSize: 18,\n                  color: \"#ffffff\",\n                  opacity: shoppingCart.length === 0 ? 0.5 : 1,\n                }}\n                onClick={() => {\n                  changeView(\"checkout\");\n                }}\n              >\n                checkout\n              </Typography>\n            </Button>\n          </Fade>\n        </Box>\n      </Slide>\n    </Box>\n  );\n}\n","/home/master/nvme/limlam/store-webapp/webapp/src/app/views/drawer_v2/desktopContent.tsx",["106","107","108","109"],"import {\n  Box,\n  Button,\n  Divider,\n  Fade,\n  IconButton,\n  InputBase,\n  MenuItem,\n  NativeSelect,\n  Select,\n  Slide,\n  Typography,\n  Zoom,\n} from \"@material-ui/core\";\nimport {\n  ArrowLeftTwoTone,\n  ArrowRightTwoTone,\n  DoneOutlineRounded,\n} from \"@material-ui/icons\";\nimport { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { ItemContentProps } from \"./drawer\";\nimport { useMediaQuery } from \"@material-ui/core\";\nimport { ItemVariant } from \"../../myTypes\";\n\nexport const ItemContentDesktop = ({\n  sideDrawerData,\n  closeDrawer,\n  addItemToCart,\n  shoppingCart,\n  removeItemFromCart,\n}: ItemContentProps) => {\n  //Image Gallery Controller\n  const [slideDir, setSlideDir] = useState<\n    \"right\" | \"left\" | \"up\" | \"down\" | undefined\n  >(\"right\");\n  const [slideIn, setSlideIn] = useState<boolean>(true);\n  const [galleryPos, setGalleryPos] = useState<number>(0);\n\n  let isWideScreen = useMediaQuery(\"(min-width:1200px)\");\n\n  const goToImage = (n: number) => {\n    //Slide out to the right\n    setSlideDir(\"right\");\n    setSlideIn(false);\n    setTimeout(() => {\n      setSlideDir(\"left\");\n\n      setGalleryPos(n);\n\n      setTimeout(() => {\n        setSlideIn(true);\n      }, 250);\n    }, 666);\n  };\n\n  //Controls left & right transition of gallery images\n  const galleryController = (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    isLeft: boolean\n  ) => {\n    if (isLeft) {\n      // Move Left\n      //Slide out to the right\n      setSlideDir(\"right\");\n      setSlideIn(false);\n\n      setTimeout(() => {\n        setSlideDir(\"left\");\n\n        if (galleryPos + 1 >= sideDrawerData.itemData.galleryImgList.length) {\n          setGalleryPos(0);\n        } else {\n          setGalleryPos(galleryPos + 1);\n        }\n\n        setTimeout(() => {\n          setSlideIn(true);\n        }, 250);\n      }, 555);\n    } else {\n      // Move Right\n      //Slide out to the right\n      setSlideDir(\"left\");\n      setSlideIn(false);\n\n      setTimeout(() => {\n        setSlideDir(\"right\");\n\n        if (galleryPos - 1 < 0) {\n          setGalleryPos(sideDrawerData.itemData.galleryImgList.length - 1);\n        } else {\n          setGalleryPos(galleryPos - 1);\n        }\n\n        setTimeout(() => {\n          setSlideIn(true);\n        }, 250);\n      }, 555);\n    }\n  };\n\n  const [variantList, setVariantList] = useState<ItemVariant[] | undefined>(\n    undefined\n  );\n  const [selectedVariant, setSelectedVariant] = useState<number>(0);\n\n  const [selectedSize, setSelectedSize] = useState<\n    \"xsm\" | \"sml\" | \"med\" | \"lrg\" | \"xlg\"\n  >(\"med\");\n\n  const selectVariant = (n: number) => {\n    setSelectedVariant(n);\n    if (variantList) {\n      let newVariantList = [...variantList];\n      for (let i = 0; i < newVariantList.length; i++) {\n        newVariantList[i].selected = i == n;\n      }\n      setVariantList(newVariantList);\n    }\n\n    goToImage(n);\n  };\n\n  useEffect(() => {\n    setVariantList(sideDrawerData.itemData.variants);\n  }, [sideDrawerData]);\n\n  return (\n    // Item Content\n    <Box\n      display=\"flex\"\n      flexDirection=\"row\"\n      // height=\"100%\"\n      borderRadius={6}\n      // border={1}\n    >\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        m={1}\n        // border={1}\n        // width=\"100%\"\n        maxWidth={isWideScreen ? 1200 : \"100%\"}\n      >\n        {/* Desktop Rounded Image Box */}\n        <Box\n          display=\"flex\"\n          position=\"relative\"\n          borderRadius={12}\n          overflow=\"hidden\"\n          boxShadow={2}\n          width=\"100%\"\n          maxWidth=\"100%\"\n        >\n          {/* Navigation arrows */}\n          <Box\n            display=\"flex\"\n            flexGrow={1}\n            position=\"absolute\"\n            width=\"100%\"\n            height=\"100%\"\n          >\n            <Box display=\"flex\" flexGrow={1} height=\"100%\">\n              <IconButton\n                style={{ height: \"100%\" }}\n                onClick={(e) => galleryController(e, true)}\n              >\n                <ArrowLeftTwoTone\n                  style={{\n                    fontSize: 69,\n                    color: \"white\",\n                  }}\n                />\n              </IconButton>\n            </Box>\n            <Box display=\"flex\" flexGrow={1} height=\"100%\" width=\"100%\"></Box>\n            <Box display=\"flex\" flexGrow={1} height=\"100%\">\n              <IconButton\n                style={{ height: \"100%\" }}\n                onClick={(e) => galleryController(e, false)}\n              >\n                <ArrowRightTwoTone style={{ fontSize: 69, color: \"white\" }} />\n              </IconButton>\n            </Box>\n          </Box>\n\n          {/* Image Slider */}\n          <Slide\n            in={slideIn}\n            direction={slideDir}\n            timeout={{ enter: 500, appear: 1000, exit: 500 }}\n          >\n            <img\n              alt=\"\"\n              src={sideDrawerData.itemData.galleryImgList[galleryPos].imgSrc}\n              style={{ maxWidth: \"100%\", height: \"auto\" }}\n            />\n          </Slide>\n        </Box>\n      </Box>\n\n      {/* Content Area */}\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        m={1}\n        maxWidth=\"40%\"\n      >\n        <Fade in={true} timeout={2222}>\n          <Box\n            display=\"flex\"\n            flexDirection=\"column\"\n            m={1}\n            justifyContent=\"spa\"\n            width=\"100%\"\n            height=\"100%\"\n          >\n            {/* Item Title & Close */}\n            <Box\n              display=\"flex\"\n              flexDirection=\"row\"\n              m={1}\n              justifyContent=\"space-between\"\n              alignItems=\"center\"\n            >\n              <Box display=\"flex\" m={1}>\n                <Typography variant=\"h2\" style={{ color: \"#ffffff\" }}>\n                  {sideDrawerData.itemData.title}\n                </Typography>\n              </Box>\n\n              <Box display=\"flex\" m={1}>\n                <IconButton\n                  size=\"small\"\n                  onClick={() => {\n                    closeDrawer();\n                  }}\n                >\n                  <CloseIcon\n                    style={{\n                      fontSize: 33,\n                    }}\n                  />\n                </IconButton>\n              </Box>\n            </Box>\n\n            {/* Variant Action Area */}\n            <Box\n              display=\"flex\"\n              m={1}\n              flexDirection=\"column\"\n              justifyContent=\"center\"\n              alignItems=\"center\"\n            >\n              <Box width=\"95%\">\n                <Divider />\n              </Box>\n              <Box\n                display=\"flex\"\n                m={1}\n                width=\"95%\"\n                flexDirection=\"row\"\n                justifyContent=\"space-between\"\n              >\n                <Box display=\"flex\" m={1}>\n                  {variantList ? (\n                    variantList.map((v, i) => (\n                      <Zoom\n                        in={true}\n                        timeout={{ appear: 2222, enter: 1000, exit: 333 }}\n                      >\n                        <IconButton\n                          style={{\n                            //Change manifest array to map with pointer index to related image\n                            background: v.buttonColor,\n                            borderRadius: 12,\n                            height: 40,\n                            width: 40,\n                            margin: 3,\n                            opacity: v.selected ? 0.5 : 1,\n                          }}\n                          onClick={() => {\n                            selectVariant(i);\n                          }}\n                        >\n                          {v.selected ? <DoneOutlineRounded /> : <></>}\n                        </IconButton>\n                      </Zoom>\n                    ))\n                  ) : (\n                    <></>\n                  )}\n                </Box>\n                <Box display=\"flex\" m={1} width=\"25%\">\n                  <Select\n                    // labelId=\"demo-simple-select-label\"\n                    id=\"demo-simple-select\"\n                    value={selectedSize}\n                    onChange={(e) => {\n                      setSelectedSize(\n                        e.target.value as \"xsm\" | \"sml\" | \"med\" | \"lrg\" | \"xlg\"\n                      );\n                    }}\n                    fullWidth\n                    MenuProps={{\n                      MenuListProps: {\n                        style: {\n                          backdropFilter: \"blur(6px)\",\n                        },\n                      },\n                    }}\n                  >\n                    <MenuItem\n                      value={\"xsm\"}\n                      style={{ backdropFilter: \"blur(6px)\" }}\n                    >\n                      X-Small\n                    </MenuItem>\n                    <MenuItem value={\"sm\"}>Small</MenuItem>\n                    <MenuItem value={\"md\"}>Medium</MenuItem>\n                    <MenuItem value={\"lg\"}>Large</MenuItem>\n                    <MenuItem value={\"xlg\"}>X-Large</MenuItem>\n                  </Select>\n                </Box>\n              </Box>\n\n              <Box width=\"95%\">\n                <Divider />\n              </Box>\n            </Box>\n            {/* Description Area */}\n            <Box display=\"flex\" flexDirection=\"row\" m={1} flexGrow={1}>\n              <Typography variant=\"h5\" style={{ color: \"#ffffff\" }}>\n                {sideDrawerData.itemData.galleryImgList[galleryPos].imgDesc}\n              </Typography>\n            </Box>\n            {/* Action Buttons */}\n            <Slide\n              in={true}\n              direction=\"up\"\n              timeout={{ appear: 1000, enter: 1000, exit: 333 }}\n            >\n              {/* Outer container */}\n              <Box\n                height=\"10%\"\n                display=\"flex\"\n                flexDirection=\"row\"\n                justifyContent=\"center\"\n              >\n                {/* Info Action Area */}\n\n                <Box\n                  display=\"flex\"\n                  m={1}\n                  color=\"#ffffff\"\n                  flexDirection=\"row\"\n                  justifyContent=\"center\"\n                  alignItems=\"center\"\n                >\n                  <Fade\n                    in={true}\n                    timeout={{ enter: 2222, appear: 2222, exit: 333 }}\n                  >\n                    <Button\n                      size=\"large\"\n                      onClick={() => {\n                        shoppingCart.find(\n                          (cartItem) =>\n                            cartItem.item.id === sideDrawerData.itemData.id\n                        )\n                          ? removeItemFromCart(sideDrawerData.itemData)\n                          : addItemToCart(\n                              sideDrawerData.itemData,\n                              selectedVariant,\n                              selectedSize,\n                              0\n                            );\n                      }}\n                    >\n                      <Typography\n                        variant=\"subtitle1\"\n                        style={{\n                          fontSize: 22,\n                          color: \"#ffffff\",\n                        }}\n                      >\n                        {shoppingCart.find(\n                          (cartItem) =>\n                            cartItem.item.id === sideDrawerData.itemData.id\n                        )\n                          ? \"Remove from cart\"\n                          : \"add to cart\"}\n                      </Typography>\n                    </Button>\n                  </Fade>\n                </Box>\n              </Box>\n            </Slide>\n          </Box>\n        </Fade>\n      </Box>\n    </Box>\n  );\n};\n","/home/master/nvme/limlam/store-webapp/webapp/src/app/views/drawer_v2/mobileContent.tsx",["110","111"],"import {\n  Box,\n  Button,\n  ButtonBase,\n  Divider,\n  Fade,\n  IconButton,\n  MenuItem,\n  Select,\n  Slide,\n  Typography,\n  useMediaQuery,\n  Zoom,\n} from \"@material-ui/core\";\nimport { CloseOutlined, DoneOutlineRounded } from \"@material-ui/icons\";\nimport { useEffect, useState } from \"react\";\nimport { ItemVariant } from \"../../myTypes\";\nimport { ItemContentProps } from \"./drawer\";\n\nexport const ItemContentMobile = ({\n  sideDrawerData,\n  closeDrawer,\n  shoppingCart,\n  removeItemFromCart,\n  addItemToCart,\n}: ItemContentProps) => {\n  //Image Gallery Controller\n  const [loaded, setLoaded] = useState<boolean>(false);\n  const [slideDir, setSlideDir] = useState<\n    \"right\" | \"left\" | \"up\" | \"down\" | undefined\n  >(\"right\");\n  const [slideIn, setSlideIn] = useState<boolean>(false);\n  const [galleryPos, setGalleryPos] = useState<number>(0);\n  // setTimeout(() => {\n  //   setSlideIn(true);\n  // }, 500);\n\n  const goToImage = (n: number) => {\n    //Slide out to the right\n    setSlideDir(\"right\");\n    setSlideIn(false);\n    setTimeout(() => {\n      setSlideDir(\"left\");\n\n      setGalleryPos(n);\n\n      setTimeout(() => {\n        setSlideIn(true);\n      }, 250);\n    }, 666);\n  };\n\n  //Controls left & right transition of gallery images\n  const galleryController = (goLeft: boolean) => {\n    if (goLeft) {\n      // Move Left\n      //Slide out to the right\n      setSlideDir(\"right\");\n      setSlideIn(false);\n\n      setTimeout(() => {\n        setSlideDir(\"left\");\n\n        if (galleryPos + 1 >= sideDrawerData.itemData.galleryImgList.length) {\n          setGalleryPos(0);\n        } else {\n          setGalleryPos(galleryPos + 1);\n        }\n\n        setTimeout(() => {\n          setSlideIn(true);\n        }, 250);\n      }, 666);\n    } else {\n      // Move Right\n      //Slide out to the right\n      setSlideDir(\"left\");\n      setSlideIn(false);\n\n      setTimeout(() => {\n        setSlideDir(\"right\");\n\n        if (galleryPos - 1 < 0) {\n          setGalleryPos(sideDrawerData.itemData.galleryImgList.length - 1);\n        } else {\n          setGalleryPos(galleryPos - 1);\n        }\n\n        setTimeout(() => {\n          setSlideIn(true);\n        }, 250);\n      }, 666);\n    }\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      setSlideIn(true);\n      setTimeout(() => {\n        setLoaded(true);\n      }, 666);\n    }, 666);\n  }, []);\n\n  // ###### touch controllers\n\n  const [touchStartX, setTouchStartX] = useState(0);\n  const [touchStartY, setTouchStartY] = useState(0);\n\n  const onTouchStartCtrl = (event: React.TouchEvent<HTMLElement>) => {\n    // console.log(\"start\", \"X:\", touch.clientX, \"Y:\", touch.clientY);\n    setTouchStartX(event.touches.item(0).clientX);\n    setTouchStartY(event.touches.item(0).clientY);\n  };\n\n  const onTouchMoveCtrl = (event: React.TouchEvent<HTMLElement>) => {\n    //Left\n    if (event.touches.item(0).clientX + 100 < touchStartX) {\n      console.log(\"swiped left\");\n      galleryController(true);\n    }\n    //right\n    if (event.touches.item(0).clientX - 100 > touchStartX) {\n      console.log(\"swiped right\");\n      galleryController(false);\n    }\n    //Left\n    if (event.touches.item(0).clientY + 250 < touchStartY) {\n      console.log(\"swiped up\");\n    }\n    //right\n    if (event.touches.item(0).clientY - 175 > touchStartY) {\n      console.log(\"swiped down\");\n      closeDrawer();\n    }\n  };\n\n  const onTouchEndCtrl = (\n    event: React.TouchEventHandler<HTMLElement> | undefined\n  ) => {};\n\n  const isTall = useMediaQuery(\"(min-height: 600px)\");\n\n  // ### variant controllers\n  const [variantList, setVariantList] = useState<ItemVariant[] | undefined>(\n    undefined\n  );\n  const [selectedVariant, setSelectedVariant] = useState<number>(0);\n\n  const [selectedSize, setSelectedSize] = useState<\n    \"xsm\" | \"sml\" | \"med\" | \"lrg\" | \"xlg\"\n  >(\"med\");\n\n  const selectVariant = (n: number) => {\n    setSelectedVariant(n);\n    if (variantList) {\n      let newVariantList = [...variantList];\n      for (let i = 0; i < newVariantList.length; i++) {\n        newVariantList[i].selected = i == n;\n      }\n      setVariantList(newVariantList);\n    }\n\n    goToImage(n);\n  };\n\n  useEffect(() => {\n    setVariantList(sideDrawerData.itemData.variants);\n  }, [sideDrawerData]);\n\n  return (\n    <Box\n      position=\"relative\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      // maxHeight=\"100%\"\n      width=\"100%\"\n      onTouchStart={(touchStartEvent) => onTouchStartCtrl(touchStartEvent)}\n      onTouchMove={(touchMoveEvent) => onTouchMoveCtrl(touchMoveEvent)}\n      onTouchEnd={(e) => onTouchEndCtrl}\n      // border={1}\n      overflow=\"auto\"\n    >\n      <Box display=\"flex\" m={1} flexDirection=\"row-reverse\">\n        <IconButton onClick={() => closeDrawer()}>\n          <CloseOutlined style={{ fontSize: 22, color: \"#ffffff\" }} />\n        </IconButton>\n      </Box>\n      {/* Desktop Rounded Image Box */}\n      <Box\n        display=\"flex\"\n        position=\"relative\"\n        borderRadius={12}\n        // m={1}\n        // maxHeight=\"50%\"\n        maxWidth=\"100%\"\n        overflow=\"hidden\"\n        // bgcolor=\"\"\n        boxShadow={2}\n      >\n        {/* Navigation arrows\n          <Box\n            display=\"flex\"\n            flexGrow={1}\n            position=\"absolute\"\n            width=\"100%\"\n            height=\"100%\"\n          >\n            <Box display=\"flex\" flexGrow={1} height=\"100%\">\n              <IconButton\n                style={{ height: \"100%\" }}\n                onClick={(e) => galleryController(e, true)}\n              >\n                <ArrowLeftTwoTone style={{ fontSize: 69, color: \"black\" }} />\n              </IconButton>\n            </Box>\n            <Box display=\"flex\" flexGrow={1} height=\"100%\" width=\"100%\"></Box>\n            <Box display=\"flex\" flexGrow={1} height=\"100%\">\n              <IconButton\n                style={{ height: \"100%\" }}\n                onClick={(e) => galleryController(e, false)}\n              >\n                {\" \"}\n                <ArrowRightTwoTone style={{ fontSize: 69, color: \"black\" }} />\n              </IconButton>\n            </Box>\n          </Box> */}\n\n        {/* Image Slider */}\n        <Slide in={slideIn} direction={slideDir} timeout={555}>\n          <img\n            alt=\"\"\n            src={sideDrawerData.itemData.galleryImgList[galleryPos].imgSrc}\n            style={{ width: \"100%\", height: \"100%\" }}\n          />\n        </Slide>\n      </Box>\n\n      {/* Content Area */}\n      <Fade in={true} timeout={2222}>\n        {/* Top oriented box */}\n        <Box\n          display=\"flex\"\n          flexDirection=\"column\"\n          m={1}\n          flexGrow={1}\n          justifyContent=\"space-around\"\n          alignItems=\"center\"\n        >\n          {/* Title/Price & Variant rows  */}\n          <Box display=\"flex\" flexDirection=\"column\" m={1} width=\"100%\">\n            <Box\n              display=\"flex\"\n              flexDirection=\"row\"\n              m={1}\n              justifyContent=\"space-between\"\n            >\n              <Box display=\"flex\" m={1}>\n                <Typography variant=\"h2\" style={{ color: \"#ffffff\" }}>\n                  {sideDrawerData.itemData.title}\n                </Typography>\n              </Box>\n              <Box display=\"flex\" m={1}>\n                <Typography\n                  variant=\"h2\"\n                  align=\"right\"\n                  style={{ color: \"#ffffff\" }}\n                >\n                  ${sideDrawerData.itemData.price}\n                </Typography>\n              </Box>\n            </Box>\n\n            {/* Variant Action Area */}\n            <Box\n              display=\"flex\"\n              width=\"100%\"\n              flexDirection=\"column\"\n              justifyContent=\"center\"\n              alignItems=\"center\"\n            >\n              <Box width=\"95%\">\n                <Divider />\n              </Box>\n              <Box\n                display=\"flex\"\n                m={1}\n                width=\"95%\"\n                flexDirection=\"row\"\n                justifyContent=\"space-between\"\n              >\n                <Box display=\"flex\" m={1}>\n                  {variantList ? (\n                    variantList.map((v, i) => (\n                      <Zoom\n                        in={true}\n                        timeout={{ appear: 2222, enter: 1000, exit: 333 }}\n                      >\n                        <IconButton\n                          style={{\n                            //Change manifest array to map with pointer index to related image\n                            background: v.buttonColor,\n                            borderRadius: 12,\n                            height: 40,\n                            width: 40,\n                            margin: 3,\n                            opacity: v.selected ? 0.5 : 1,\n                          }}\n                          onClick={() => {\n                            selectVariant(i);\n                          }}\n                        >\n                          {v.selected ? <DoneOutlineRounded /> : <></>}\n                        </IconButton>\n                      </Zoom>\n                    ))\n                  ) : (\n                    <></>\n                  )}\n                </Box>\n                <Box display=\"flex\" m={1} width=\"25%\">\n                  <Select\n                    labelId=\"drawer-select-label\"\n                    id=\"drawer-simple-select\"\n                    value={selectedSize}\n                    onChange={(e) => {\n                      setSelectedSize(\n                        e.target.value as \"xsm\" | \"sml\" | \"med\" | \"lrg\" | \"xlg\"\n                      );\n                    }}\n                    fullWidth\n                    MenuProps={{\n                      MenuListProps: {\n                        style: {\n                          backdropFilter: \"blur(6px)\",\n                        },\n                      },\n                    }}\n                  >\n                    <MenuItem\n                      value={\"xsm\"}\n                      style={{ backdropFilter: \"blur(6px)\" }}\n                    >\n                      X-Small\n                    </MenuItem>\n                    <MenuItem value={\"sm\"}>Small</MenuItem>\n                    <MenuItem value={\"md\"}>Medium</MenuItem>\n                    <MenuItem value={\"lg\"}>Large</MenuItem>\n                    <MenuItem value={\"xlg\"}>X-Large</MenuItem>\n                  </Select>\n                </Box>\n              </Box>\n\n              <Box width=\"95%\">\n                <Divider />\n              </Box>\n            </Box>\n          </Box>\n\n          {/* Description Area */}\n          <Box display=\"flex\" m={2} overflow=\"hidden\">\n            <Fade\n              in={loaded}\n              timeout={{\n                appear: 666,\n                enter: 666,\n                exit: 666,\n              }}\n            >\n              <Typography variant=\"subtitle1\" align=\"center\">\n                {sideDrawerData.itemData.galleryImgList[galleryPos].imgDesc}\n              </Typography>\n            </Fade>\n          </Box>\n\n          {/* Action Buttons */}\n          <Box display=\"flex\" m={1}>\n            <Slide\n              in={true}\n              direction=\"up\"\n              timeout={{ appear: 1000, enter: 1000, exit: 333 }}\n            >\n              {/* Info Action Area */}\n\n              <Box\n                display=\"flex\"\n                m={1}\n                // border={0.2}\n                color=\"#ffffff\"\n                // width=\"50%\"\n                flexDirection=\"row\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n              >\n                <Fade\n                  in={true}\n                  timeout={{ enter: 2222, appear: 2222, exit: 333 }}\n                >\n                  <Button\n                    // variant=\"outlined\"\n                    size=\"large\"\n                    onClick={() => {\n                      // shoppingCart.includes(sideDrawerData.itemData.item)\n                      //   ? removeItemFromCart(sideDrawerData.itemData)\n                      //   : addItemToCart(sideDrawerData.itemData);\n\n                      shoppingCart.find(\n                        (cartItem) =>\n                          cartItem.item.id === sideDrawerData.itemData.id\n                      )\n                        ? removeItemFromCart(sideDrawerData.itemData)\n                        : addItemToCart(\n                            sideDrawerData.itemData,\n                            selectedVariant,\n                            selectedSize,\n                            0\n                          );\n                    }}\n                    // style={{ margin: 10 }}\n                  >\n                    <Typography\n                      variant=\"subtitle1\"\n                      style={{\n                        fontSize: 18,\n                        color: \"#ffffff\",\n                      }}\n                    >\n                      {shoppingCart.find(\n                        (cartItem) =>\n                          cartItem.item.id === sideDrawerData.itemData.id\n                      )\n                        ? \"Remove from cart\"\n                        : \"add to cart\"}\n                    </Typography>\n                  </Button>\n                </Fade>\n                <br />\n                <br />\n              </Box>\n            </Slide>\n          </Box>\n          <Box display=\"flex\" height={isTall ? 55 : 35}></Box>\n        </Box>\n      </Fade>\n    </Box>\n  );\n};\n","/home/master/nvme/limlam/store-webapp/webapp/src/app/views/browse_v3/lib/ripple.ts",[],"/home/master/nvme/limlam/store-webapp/webapp/src/app/views/browse_v3/api/getManifest.ts",["112","113"],"/home/master/nvme/limlam/store-webapp/webapp/src/proto/storeapi_pb_service.js",[],"/home/master/nvme/limlam/store-webapp/webapp/src/proto/storeapi_pb.js",["114","115","116","117","118"],"/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\nvar jspb = require(\"google-protobuf\");\nvar goog = jspb;\nvar global = Function(\"return this\")();\nconst proto = require(\"./storeapi_pb\");\nconst COMPILED = true;\n\ngoog.exportSymbol(\"proto.GetBrowseManifestInbound\", null, global);\ngoog.exportSymbol(\"proto.GetBrowseManifestOutbound\", null, global);\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.GetBrowseManifestInbound = function (opt_data) {\n  jspb.Message.initialize(\n    this,\n    opt_data,\n    0,\n    -1,\n    proto.GetBrowseManifestInbound.repeatedFields_,\n    null\n  );\n};\ngoog.inherits(proto.GetBrowseManifestInbound, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.GetBrowseManifestInbound.displayName = \"proto.GetBrowseManifestInbound\";\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.GetBrowseManifestInbound.repeatedFields_ = [1];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.GetBrowseManifestInbound.prototype.toObject = function (\n    opt_includeInstance\n  ) {\n    return proto.GetBrowseManifestInbound.toObject(opt_includeInstance, this);\n  };\n\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.GetBrowseManifestInbound} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n  proto.GetBrowseManifestInbound.toObject = function (includeInstance, msg) {\n    var f,\n      obj = {\n        flagsList: jspb.Message.getRepeatedField(msg, 1),\n        userid: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n        originid: jspb.Message.getFieldWithDefault(msg, 3, \"\"),\n      };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n    return obj;\n  };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.GetBrowseManifestInbound}\n */\nproto.GetBrowseManifestInbound.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.GetBrowseManifestInbound();\n  return proto.GetBrowseManifestInbound.deserializeBinaryFromReader(\n    msg,\n    reader\n  );\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.GetBrowseManifestInbound} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.GetBrowseManifestInbound}\n */\nproto.GetBrowseManifestInbound.deserializeBinaryFromReader = function (\n  msg,\n  reader\n) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n      case 1:\n        var value = /** @type {string} */ (reader.readString());\n        msg.addFlags(value);\n        break;\n      case 2:\n        var value = /** @type {string} */ (reader.readString());\n        msg.setUserid(value);\n        break;\n      case 3:\n        var value = /** @type {string} */ (reader.readString());\n        msg.setOriginid(value);\n        break;\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n  return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.GetBrowseManifestInbound.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.GetBrowseManifestInbound.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.GetBrowseManifestInbound} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.GetBrowseManifestInbound.serializeBinaryToWriter = function (\n  message,\n  writer\n) {\n  var f = undefined;\n  f = message.getFlagsList();\n  if (f.length > 0) {\n    writer.writeRepeatedString(1, f);\n  }\n  f = message.getUserid();\n  if (f.length > 0) {\n    writer.writeString(2, f);\n  }\n  f = message.getOriginid();\n  if (f.length > 0) {\n    writer.writeString(3, f);\n  }\n};\n\n/**\n * repeated string flags = 1;\n * @return {!Array<string>}\n */\nproto.GetBrowseManifestInbound.prototype.getFlagsList = function () {\n  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n/** @param {!Array<string>} value */\nproto.GetBrowseManifestInbound.prototype.setFlagsList = function (value) {\n  jspb.Message.setField(this, 1, value || []);\n};\n\n/**\n * @param {!string} value\n * @param {number=} opt_index\n */\nproto.GetBrowseManifestInbound.prototype.addFlags = function (\n  value,\n  opt_index\n) {\n  jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\nproto.GetBrowseManifestInbound.prototype.clearFlagsList = function () {\n  this.setFlagsList([]);\n};\n\n/**\n * optional string userID = 2;\n * @return {string}\n */\nproto.GetBrowseManifestInbound.prototype.getUserid = function () {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n/** @param {string} value */\nproto.GetBrowseManifestInbound.prototype.setUserid = function (value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n/**\n * optional string originID = 3;\n * @return {string}\n */\nproto.GetBrowseManifestInbound.prototype.getOriginid = function () {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n/** @param {string} value */\nproto.GetBrowseManifestInbound.prototype.setOriginid = function (value) {\n  jspb.Message.setProto3StringField(this, 3, value);\n};\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.GetBrowseManifestOutbound = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.GetBrowseManifestOutbound, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.GetBrowseManifestOutbound.displayName =\n    \"proto.GetBrowseManifestOutbound\";\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto suitable for use in Soy templates.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n   *     for transitional soy proto support: http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.GetBrowseManifestOutbound.prototype.toObject = function (\n    opt_includeInstance\n  ) {\n    return proto.GetBrowseManifestOutbound.toObject(opt_includeInstance, this);\n  };\n\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Whether to include the JSPB\n   *     instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.GetBrowseManifestOutbound} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n  proto.GetBrowseManifestOutbound.toObject = function (includeInstance, msg) {\n    var f,\n      obj = {\n        manifest: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n      };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n    return obj;\n  };\n}\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.GetBrowseManifestOutbound}\n */\nproto.GetBrowseManifestOutbound.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.GetBrowseManifestOutbound();\n  return proto.GetBrowseManifestOutbound.deserializeBinaryFromReader(\n    msg,\n    reader\n  );\n};\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.GetBrowseManifestOutbound} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.GetBrowseManifestOutbound}\n */\nproto.GetBrowseManifestOutbound.deserializeBinaryFromReader = function (\n  msg,\n  reader\n) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n      case 1:\n        var value = /** @type {string} */ (reader.readString());\n        msg.setManifest(value);\n        break;\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n  return msg;\n};\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.GetBrowseManifestOutbound.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.GetBrowseManifestOutbound.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.GetBrowseManifestOutbound} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.GetBrowseManifestOutbound.serializeBinaryToWriter = function (\n  message,\n  writer\n) {\n  var f = undefined;\n  f = message.getManifest();\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n};\n\n/**\n * optional string manifest = 1;\n * @return {string}\n */\nproto.GetBrowseManifestOutbound.prototype.getManifest = function () {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n/** @param {string} value */\nproto.GetBrowseManifestOutbound.prototype.setManifest = function (value) {\n  jspb.Message.setProto3StringField(this, 1, value);\n};\n\ngoog.object.extend(exports, proto);\n",["119","120"],{"ruleId":"121","severity":1,"message":"122","line":8,"column":10,"nodeType":"123","messageId":"124","endLine":8,"endColumn":16},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","severity":1,"message":"130","line":111,"column":6,"nodeType":"131","endLine":111,"endColumn":8,"suggestions":"132"},{"ruleId":"121","severity":1,"message":"133","line":6,"column":3,"nodeType":"123","messageId":"124","endLine":6,"endColumn":11},{"ruleId":"129","severity":1,"message":"134","line":381,"column":6,"nodeType":"131","endLine":381,"endColumn":15,"suggestions":"135"},{"ruleId":"136","severity":1,"message":"137","line":398,"column":38,"nodeType":"138","messageId":"139","endLine":398,"endColumn":40},{"ruleId":"129","severity":1,"message":"140","line":448,"column":6,"nodeType":"131","endLine":448,"endColumn":16,"suggestions":"141"},{"ruleId":"121","severity":1,"message":"133","line":6,"column":10,"nodeType":"123","messageId":"124","endLine":6,"endColumn":18},{"ruleId":"121","severity":1,"message":"133","line":3,"column":10,"nodeType":"123","messageId":"124","endLine":3,"endColumn":18},{"ruleId":"121","severity":1,"message":"142","line":8,"column":3,"nodeType":"123","messageId":"124","endLine":8,"endColumn":10},{"ruleId":"129","severity":1,"message":"143","line":95,"column":6,"nodeType":"131","endLine":95,"endColumn":8,"suggestions":"144"},{"ruleId":"129","severity":1,"message":"145","line":233,"column":6,"nodeType":"131","endLine":233,"endColumn":8,"suggestions":"146"},{"ruleId":"121","severity":1,"message":"147","line":369,"column":9,"nodeType":"123","messageId":"124","endLine":369,"endColumn":16},{"ruleId":"121","severity":1,"message":"133","line":19,"column":10,"nodeType":"123","messageId":"124","endLine":19,"endColumn":18},{"ruleId":"121","severity":1,"message":"148","line":7,"column":3,"nodeType":"123","messageId":"124","endLine":7,"endColumn":12},{"ruleId":"121","severity":1,"message":"149","line":9,"column":3,"nodeType":"123","messageId":"124","endLine":9,"endColumn":15},{"ruleId":"121","severity":1,"message":"150","line":21,"column":10,"nodeType":"123","messageId":"124","endLine":21,"endColumn":20},{"ruleId":"151","severity":1,"message":"152","line":118,"column":40,"nodeType":"153","messageId":"154","endLine":118,"endColumn":42},{"ruleId":"121","severity":1,"message":"155","line":4,"column":3,"nodeType":"123","messageId":"124","endLine":4,"endColumn":13},{"ruleId":"151","severity":1,"message":"152","line":159,"column":40,"nodeType":"153","messageId":"154","endLine":159,"endColumn":42},{"ruleId":"121","severity":1,"message":"156","line":1,"column":10,"nodeType":"123","messageId":"124","endLine":1,"endColumn":14},{"ruleId":"121","severity":1,"message":"157","line":5,"column":3,"nodeType":"123","messageId":"124","endLine":5,"endColumn":28},{"ruleId":"158","severity":1,"message":"159","line":12,"column":14,"nodeType":"160","messageId":"161","endLine":12,"endColumn":37},{"ruleId":"162","severity":1,"message":"163","line":77,"column":9,"nodeType":"123","messageId":"124","endLine":77,"endColumn":10},{"ruleId":"164","severity":1,"message":"165","line":127,"column":13,"nodeType":"123","messageId":"166","endLine":127,"endColumn":18},{"ruleId":"164","severity":1,"message":"165","line":131,"column":13,"nodeType":"123","messageId":"166","endLine":131,"endColumn":18},{"ruleId":"162","severity":1,"message":"163","line":278,"column":9,"nodeType":"123","messageId":"124","endLine":278,"endColumn":10},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","replacedBy":"128"},"@typescript-eslint/no-unused-vars","'colors' is defined but never used.","Identifier","unusedVar","no-native-reassign",["167"],"no-negated-in-lhs",["168"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'shoppingCart'. Either include it or remove the dependency array. You can also do a functional update 'setShoppingCart(s => ...)' if you only need 'shoppingCart' in the 'setShoppingCart' call.","ArrayExpression",["169"],"'ItemData' is defined but never used.","React Hook useEffect has missing dependencies: 'loaded' and 'show'. Either include them or remove the dependency array.",["170"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has a missing dependency: 'openSideDrawer'. Either include it or remove the dependency array. If 'setElems' needs the current value of 'openSideDrawer', you can also switch to useReducer instead of useState and read 'openSideDrawer' in the reducer.",["171"],"'Divider' is defined but never used.","React Hook useEffect has a missing dependency: 'itemData.id'. Either include it or remove the dependency array. If 'setinCart' needs the current value of 'itemData.id', you can also switch to useReducer instead of useState and read 'itemData.id' in the reducer.",["172"],"React Hook useEffect has missing dependencies: 'leftItemData.id' and 'rightItemData.id'. Either include them or remove the dependency array. If 'setLeftInCart' needs the current value of 'leftItemData.id', you can also switch to useReducer instead of useState and read 'leftItemData.id' in the reducer.",["173"],"'classes' is assigned a value but never used.","'InputBase' is defined but never used.","'NativeSelect' is defined but never used.","'makeStyles' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'ButtonBase' is defined but never used.","'grpc' is defined but never used.","'GetBrowseManifestOutbound' is defined but never used.","no-new-func","The Function constructor is eval.","CallExpression","noFunctionConstructor","no-unused-vars","'f' is defined but never used.","no-redeclare","'value' is already defined.","redeclared","no-global-assign","no-unsafe-negation",{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},"Update the dependencies array to be: [shoppingCart]",{"range":"184","text":"185"},"Update the dependencies array to be: [exiting, loaded, show]",{"range":"186","text":"187"},"Update the dependencies array to be: [manifest, openSideDrawer]",{"range":"188","text":"189"},"Update the dependencies array to be: [itemData.id]",{"range":"190","text":"191"},"Update the dependencies array to be: [leftItemData.id, rightItemData.id]",{"range":"192","text":"193"},[3316,3318],"[shoppingCart]",[14437,14446],"[exiting, loaded, show]",[16607,16617],"[manifest, openSideDrawer]",[2522,2524],"[itemData.id]",[6035,6037],"[leftItemData.id, rightItemData.id]"]